// Generated by CodiumAI
import { rejects } from 'node:assert'
import { saveJsonIntoDb } from './utils'
import fs from 'node:fs'
import { describe, it, expect } from 'vitest'
describe('saveJsonIntoDb', () => {
  // The function successfully saves a valid JSON object into a file.
  it('should save a valid JSON object into a file', () => {
    // Arrange
    const jsonData = { name: 'John', age: 30 }

    // Act
    saveJsonIntoDb(jsonData)

    // Assert
    const filePath = 'db/dolar.json'
    const fileContent = fs.readFileSync(filePath, 'utf-8')
    const parsedContent = JSON.parse(fileContent)
    expect(parsedContent).toEqual(jsonData)
  })

  // The function correctly formats the JSON object with indentation.
  it('should format the JSON object with indentation', () => {
    // Arrange
    const jsonData = { name: 'John', age: 30 }

    // Act
    saveJsonIntoDb(jsonData)

    // Assert
    const filePath = 'db/dolar.json'
    const fileContent = fs.readFileSync(filePath, 'utf-8')
    expect(fileContent).toContain('  ')
  })

  // The function saves the JSON object into the correct file path.
  it('should save the JSON object into the correct file path', () => {
    // Arrange
    const jsonData = { name: 'John', age: 30 }

    // Act
    saveJsonIntoDb(jsonData)

    // Assert
    const filePath = 'db/dolar.json'
    const fileContent = fs.readFileSync(filePath, 'utf-8')
    expect(fileContent).not.toBeUndefined()
  })

  // The function throws an error if the JSON object is null or undefined.
  it('should throw an error if the JSON object is null or undefined', () => {
    // Arrange
    const jsonData = null

    // Act & Assert
    expect(() => saveJsonIntoDb(jsonData)).rejects.toThrow()
  })

  // The function throws an error if the file path is not valid or the file cannot be written.
  it('should throw an error if the file path is not valid or the file cannot be written', () => {
    // Arrange
    const jsonData = { name: 'John', age: 30 }
    const invalidFilePath = 'invalid/|path.json'

    // Act & Assert
    expect(() => saveJsonIntoDb(jsonData, invalidFilePath)).rejects.toThrow()
  })
})
